//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Dryad {

public class Facade : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Facade(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Facade obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Facade() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DryadFacadePINVOKE.delete_Facade(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Facade() : this(DryadFacadePINVOKE.new_Facade(), true) {
  }

  public void RegisterMotif(Motif motif) {
    DryadFacadePINVOKE.Facade_RegisterMotif(swigCPtr, Motif.getCPtr(motif));
    if (DryadFacadePINVOKE.SWIGPendingException.Pending) throw DryadFacadePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RegisterLandscape(LandscapeGraph landscape) {
    DryadFacadePINVOKE.Facade_RegisterLandscape(swigCPtr, LandscapeGraph.getCPtr(landscape));
    if (DryadFacadePINVOKE.SWIGPendingException.Pending) throw DryadFacadePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddMotif(uint motifId) {
    DryadFacadePINVOKE.Facade_AddMotif(swigCPtr, motifId);
  }

  public void RemoveMotif(uint motifId) {
    DryadFacadePINVOKE.Facade_RemoveMotif(swigCPtr, motifId);
  }

  public void SetLandscape(uint landscapeId) {
    DryadFacadePINVOKE.Facade_SetLandscape(swigCPtr, landscapeId);
  }

  public void Generate(uint durationToGenerate) {
    DryadFacadePINVOKE.Facade_Generate(swigCPtr, durationToGenerate);
  }

  public NoteToPlayList Play(uint durationToPlay) {
    NoteToPlayList ret = new NoteToPlayList(DryadFacadePINVOKE.Facade_Play(swigCPtr, durationToPlay), true);
    return ret;
  }

}

}
