//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DryadUnity {

public class HarmonyGraph : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HarmonyGraph(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HarmonyGraph obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HarmonyGraph() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DryadApiPINVOKE.delete_HarmonyGraph(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Scale scale {
    set {
      DryadApiPINVOKE.HarmonyGraph_scale_set(swigCPtr, Scale.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = DryadApiPINVOKE.HarmonyGraph_scale_get(swigCPtr);
      Scale ret = (cPtr == global::System.IntPtr.Zero) ? null : new Scale(cPtr, false);
      return ret;
    } 
  }

  public NodeVector nodes {
    set {
      DryadApiPINVOKE.HarmonyGraph_nodes_set(swigCPtr, NodeVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = DryadApiPINVOKE.HarmonyGraph_nodes_get(swigCPtr);
      NodeVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new NodeVector(cPtr, false);
      return ret;
    } 
  }

  public EdgeVector edges {
    set {
      DryadApiPINVOKE.HarmonyGraph_edges_set(swigCPtr, EdgeVector.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = DryadApiPINVOKE.HarmonyGraph_edges_get(swigCPtr);
      EdgeVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new EdgeVector(cPtr, false);
      return ret;
    } 
  }

  public HarmonyGraph() : this(DryadApiPINVOKE.new_HarmonyGraph(), true) {
  }

}

}
