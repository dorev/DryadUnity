/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_DryadApi(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_DryadApi(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_DryadApi(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "dryadapi.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< MotifNote > *new_std_vector_Sl_MotifNote_Sg___SWIG_2(int capacity){
        std::vector< MotifNote >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< MotifNote >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN MotifNote std_vector_Sl_MotifNote_Sg__getitemcopy(std::vector< MotifNote > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< MotifNote >::value_type const &std_vector_Sl_MotifNote_Sg__getitem(std::vector< MotifNote > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MotifNote_Sg__setitem(std::vector< MotifNote > *self,int index,MotifNote const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MotifNote_Sg__AddRange(std::vector< MotifNote > *self,std::vector< MotifNote > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< MotifNote > *std_vector_Sl_MotifNote_Sg__GetRange(std::vector< MotifNote > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< MotifNote >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MotifNote_Sg__Insert(std::vector< MotifNote > *self,int index,MotifNote const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MotifNote_Sg__InsertRange(std::vector< MotifNote > *self,int index,std::vector< MotifNote > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MotifNote_Sg__RemoveAt(std::vector< MotifNote > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MotifNote_Sg__RemoveRange(std::vector< MotifNote > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< MotifNote > *std_vector_Sl_MotifNote_Sg__Repeat(MotifNote const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< MotifNote >(count, value);
      }
SWIGINTERN void std_vector_Sl_MotifNote_Sg__Reverse__SWIG_0(std::vector< MotifNote > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_MotifNote_Sg__Reverse__SWIG_1(std::vector< MotifNote > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MotifNote_Sg__SetRange(std::vector< MotifNote > *self,int index,std::vector< MotifNote > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Node > *new_std_vector_Sl_Node_Sg___SWIG_2(int capacity){
        std::vector< Node >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Node >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Node std_vector_Sl_Node_Sg__getitemcopy(std::vector< Node > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Node >::value_type const &std_vector_Sl_Node_Sg__getitem(std::vector< Node > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sg__setitem(std::vector< Node > *self,int index,Node const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sg__AddRange(std::vector< Node > *self,std::vector< Node > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Node > *std_vector_Sl_Node_Sg__GetRange(std::vector< Node > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Node >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Node_Sg__Insert(std::vector< Node > *self,int index,Node const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sg__InsertRange(std::vector< Node > *self,int index,std::vector< Node > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sg__RemoveAt(std::vector< Node > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sg__RemoveRange(std::vector< Node > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Node > *std_vector_Sl_Node_Sg__Repeat(Node const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Node >(count, value);
      }
SWIGINTERN void std_vector_Sl_Node_Sg__Reverse__SWIG_0(std::vector< Node > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Node_Sg__Reverse__SWIG_1(std::vector< Node > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Node_Sg__SetRange(std::vector< Node > *self,int index,std::vector< Node > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Edge > *new_std_vector_Sl_Edge_Sg___SWIG_2(int capacity){
        std::vector< Edge >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Edge >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Edge std_vector_Sl_Edge_Sg__getitemcopy(std::vector< Edge > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Edge >::value_type const &std_vector_Sl_Edge_Sg__getitem(std::vector< Edge > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__setitem(std::vector< Edge > *self,int index,Edge const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__AddRange(std::vector< Edge > *self,std::vector< Edge > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Edge > *std_vector_Sl_Edge_Sg__GetRange(std::vector< Edge > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Edge >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__Insert(std::vector< Edge > *self,int index,Edge const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__InsertRange(std::vector< Edge > *self,int index,std::vector< Edge > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__RemoveAt(std::vector< Edge > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__RemoveRange(std::vector< Edge > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Edge > *std_vector_Sl_Edge_Sg__Repeat(Edge const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Edge >(count, value);
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__Reverse__SWIG_0(std::vector< Edge > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__Reverse__SWIG_1(std::vector< Edge > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__SetRange(std::vector< Edge > *self,int index,std::vector< Edge > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< unsigned int > *new_std_vector_Sl_unsigned_SS_int_Sg___SWIG_2(int capacity){
        std::vector< unsigned int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg__getitemcopy(std::vector< unsigned int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_unsigned_SS_int_Sg__getitem(std::vector< unsigned int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__setitem(std::vector< unsigned int > *self,int index,unsigned int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__AddRange(std::vector< unsigned int > *self,std::vector< unsigned int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned int > *std_vector_Sl_unsigned_SS_int_Sg__GetRange(std::vector< unsigned int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__Insert(std::vector< unsigned int > *self,int index,unsigned int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__InsertRange(std::vector< unsigned int > *self,int index,std::vector< unsigned int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__RemoveAt(std::vector< unsigned int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__RemoveRange(std::vector< unsigned int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned int > *std_vector_Sl_unsigned_SS_int_Sg__Repeat(unsigned int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned int >(count, value);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_0(std::vector< unsigned int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_1(std::vector< unsigned int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__SetRange(std::vector< unsigned int > *self,int index,std::vector< unsigned int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg__Contains(std::vector< unsigned int > *self,unsigned int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_int_Sg__IndexOf(std::vector< unsigned int > *self,unsigned int const &value){
        int index = -1;
        std::vector< unsigned int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_int_Sg__LastIndexOf(std::vector< unsigned int > *self,unsigned int const &value){
        int index = -1;
        std::vector< unsigned int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg__Remove(std::vector< unsigned int > *self,unsigned int const &value){
        std::vector< unsigned int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< NoteToPlay > *new_std_vector_Sl_NoteToPlay_Sg___SWIG_2(int capacity){
        std::vector< NoteToPlay >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< NoteToPlay >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN NoteToPlay std_vector_Sl_NoteToPlay_Sg__getitemcopy(std::vector< NoteToPlay > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< NoteToPlay >::value_type const &std_vector_Sl_NoteToPlay_Sg__getitem(std::vector< NoteToPlay > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteToPlay_Sg__setitem(std::vector< NoteToPlay > *self,int index,NoteToPlay const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteToPlay_Sg__AddRange(std::vector< NoteToPlay > *self,std::vector< NoteToPlay > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< NoteToPlay > *std_vector_Sl_NoteToPlay_Sg__GetRange(std::vector< NoteToPlay > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< NoteToPlay >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_NoteToPlay_Sg__Insert(std::vector< NoteToPlay > *self,int index,NoteToPlay const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteToPlay_Sg__InsertRange(std::vector< NoteToPlay > *self,int index,std::vector< NoteToPlay > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteToPlay_Sg__RemoveAt(std::vector< NoteToPlay > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteToPlay_Sg__RemoveRange(std::vector< NoteToPlay > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< NoteToPlay > *std_vector_Sl_NoteToPlay_Sg__Repeat(NoteToPlay const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< NoteToPlay >(count, value);
      }
SWIGINTERN void std_vector_Sl_NoteToPlay_Sg__Reverse__SWIG_0(std::vector< NoteToPlay > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_NoteToPlay_Sg__Reverse__SWIG_1(std::vector< NoteToPlay > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_NoteToPlay_Sg__SetRange(std::vector< NoteToPlay > *self,int index,std::vector< NoteToPlay > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_Clear(void * jarg1) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_Add(void * jarg1, void * jarg2) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  MotifNote *arg2 = 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (MotifNote *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MotifNote const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((MotifNote const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_MotifList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  std::vector< MotifNote >::size_type result;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  result = ((std::vector< MotifNote > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_MotifList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  std::vector< MotifNote >::size_type result;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  result = ((std::vector< MotifNote > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  std::vector< MotifNote >::size_type arg2 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (std::vector< MotifNote >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_MotifList__SWIG_0() {
  void * jresult ;
  std::vector< MotifNote > *result = 0 ;
  
  result = (std::vector< MotifNote > *)new std::vector< MotifNote >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_MotifList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< MotifNote > *arg1 = 0 ;
  std::vector< MotifNote > *result = 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MotifNote > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< MotifNote > *)new std::vector< MotifNote >((std::vector< MotifNote > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_MotifList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< MotifNote > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< MotifNote > *)new_std_vector_Sl_MotifNote_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_MotifList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  int arg2 ;
  MotifNote result;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_MotifNote_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new MotifNote((const MotifNote &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_MotifList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  int arg2 ;
  std::vector< MotifNote >::value_type *result = 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MotifNote >::value_type *) &std_vector_Sl_MotifNote_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  int arg2 ;
  MotifNote *arg3 = 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MotifNote *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MotifNote const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MotifNote_Sg__setitem(arg1,arg2,(MotifNote const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_AddRange(void * jarg1, void * jarg2) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  std::vector< MotifNote > *arg2 = 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (std::vector< MotifNote > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MotifNote > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_MotifNote_Sg__AddRange(arg1,(std::vector< MotifNote > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_MotifList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< MotifNote > *result = 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< MotifNote > *)std_vector_Sl_MotifNote_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  int arg2 ;
  MotifNote *arg3 = 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (MotifNote *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MotifNote const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MotifNote_Sg__Insert(arg1,arg2,(MotifNote const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  int arg2 ;
  std::vector< MotifNote > *arg3 = 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MotifNote > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MotifNote > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MotifNote_Sg__InsertRange(arg1,arg2,(std::vector< MotifNote > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_MotifNote_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MotifNote_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_MotifList_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  MotifNote *arg1 = 0 ;
  int arg2 ;
  std::vector< MotifNote > *result = 0 ;
  
  arg1 = (MotifNote *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MotifNote const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MotifNote > *)std_vector_Sl_MotifNote_Sg__Repeat((MotifNote const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_Reverse__SWIG_0(void * jarg1) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  std_vector_Sl_MotifNote_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MotifNote_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_MotifList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  int arg2 ;
  std::vector< MotifNote > *arg3 = 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MotifNote > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MotifNote > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MotifNote_Sg__SetRange(arg1,arg2,(std::vector< MotifNote > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_MotifList(void * jarg1) {
  std::vector< MotifNote > *arg1 = (std::vector< MotifNote > *) 0 ;
  
  arg1 = (std::vector< MotifNote > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_Clear(void * jarg1) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_Add(void * jarg1, void * jarg2) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  Node *arg2 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (Node *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Node const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_NodeList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node >::size_type result;
  
  arg1 = (std::vector< Node > *)jarg1; 
  result = ((std::vector< Node > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_NodeList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node >::size_type result;
  
  arg1 = (std::vector< Node > *)jarg1; 
  result = ((std::vector< Node > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node >::size_type arg2 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (std::vector< Node >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NodeList__SWIG_0() {
  void * jresult ;
  std::vector< Node > *result = 0 ;
  
  result = (std::vector< Node > *)new std::vector< Node >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NodeList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Node > *arg1 = 0 ;
  std::vector< Node > *result = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Node > *)new std::vector< Node >((std::vector< Node > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NodeList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Node > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Node > *)new_std_vector_Sl_Node_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NodeList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  Node result;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Node_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Node((const Node &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NodeList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  std::vector< Node >::value_type *result = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Node >::value_type *) &std_vector_Sl_Node_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  Node *arg3 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Node *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Node_Sg__setitem(arg1,arg2,(Node const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_AddRange(void * jarg1, void * jarg2) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node > *arg2 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (std::vector< Node > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Node_Sg__AddRange(arg1,(std::vector< Node > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NodeList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Node > *result = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Node > *)std_vector_Sl_Node_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  Node *arg3 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Node *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Node_Sg__Insert(arg1,arg2,(Node const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  std::vector< Node > *arg3 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Node > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Node_Sg__InsertRange(arg1,arg2,(std::vector< Node > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Node_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Node_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NodeList_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Node *arg1 = 0 ;
  int arg2 ;
  std::vector< Node > *result = 0 ;
  
  arg1 = (Node *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Node > *)std_vector_Sl_Node_Sg__Repeat((Node const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_Reverse__SWIG_0(void * jarg1) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  std_vector_Sl_Node_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Node_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  std::vector< Node > *arg3 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Node > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Node_Sg__SetRange(arg1,arg2,(std::vector< Node > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_NodeList(void * jarg1) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_Clear(void * jarg1) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_Add(void * jarg1, void * jarg2) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  Edge *arg2 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (Edge *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Edge const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Edge const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_EdgeList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  std::vector< Edge >::size_type result;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  result = ((std::vector< Edge > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_EdgeList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  std::vector< Edge >::size_type result;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  result = ((std::vector< Edge > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  std::vector< Edge >::size_type arg2 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (std::vector< Edge >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_EdgeList__SWIG_0() {
  void * jresult ;
  std::vector< Edge > *result = 0 ;
  
  result = (std::vector< Edge > *)new std::vector< Edge >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_EdgeList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Edge > *arg1 = 0 ;
  std::vector< Edge > *result = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Edge > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Edge > *)new std::vector< Edge >((std::vector< Edge > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_EdgeList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Edge > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Edge > *)new_std_vector_Sl_Edge_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_EdgeList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  Edge result;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Edge_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Edge((const Edge &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_EdgeList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  std::vector< Edge >::value_type *result = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Edge >::value_type *) &std_vector_Sl_Edge_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  Edge *arg3 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Edge *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Edge const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Edge_Sg__setitem(arg1,arg2,(Edge const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_AddRange(void * jarg1, void * jarg2) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  std::vector< Edge > *arg2 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (std::vector< Edge > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Edge > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Edge_Sg__AddRange(arg1,(std::vector< Edge > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_EdgeList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Edge > *result = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Edge > *)std_vector_Sl_Edge_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  Edge *arg3 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Edge *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Edge const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Edge_Sg__Insert(arg1,arg2,(Edge const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  std::vector< Edge > *arg3 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Edge > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Edge > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Edge_Sg__InsertRange(arg1,arg2,(std::vector< Edge > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Edge_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Edge_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_EdgeList_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Edge *arg1 = 0 ;
  int arg2 ;
  std::vector< Edge > *result = 0 ;
  
  arg1 = (Edge *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Edge const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Edge > *)std_vector_Sl_Edge_Sg__Repeat((Edge const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_Reverse__SWIG_0(void * jarg1) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  std_vector_Sl_Edge_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Edge_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  std::vector< Edge > *arg3 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Edge > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Edge > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Edge_Sg__SetRange(arg1,arg2,(std::vector< Edge > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_EdgeList(void * jarg1) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_Clear(void * jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_Add(void * jarg1, unsigned int jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_IntervalList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_IntervalList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_IntervalList__SWIG_0() {
  void * jresult ;
  std::vector< unsigned int > *result = 0 ;
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_IntervalList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< unsigned int > *arg1 = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_IntervalList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< unsigned int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< unsigned int > *)new_std_vector_Sl_unsigned_SS_int_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DryadUnity_IntervalList_getitemcopy(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DryadUnity_IntervalList_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__setitem(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_AddRange(void * jarg1, void * jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (std::vector< unsigned int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_unsigned_SS_int_Sg__AddRange(arg1,(std::vector< unsigned int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_IntervalList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned int > *result = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned int > *)std_vector_Sl_unsigned_SS_int_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_Insert(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__Insert(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__InsertRange(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_IntervalList_Repeat(unsigned int jarg1, int jarg2) {
  void * jresult ;
  unsigned int *arg1 = 0 ;
  int arg2 ;
  unsigned int temp1 ;
  std::vector< unsigned int > *result = 0 ;
  
  temp1 = (unsigned int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int > *)std_vector_Sl_unsigned_SS_int_Sg__Repeat((unsigned int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_Reverse__SWIG_0(void * jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntervalList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__SetRange(arg1,arg2,(std::vector< unsigned int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DryadUnity_IntervalList_Contains(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_int_Sg__Contains(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_IntervalList_IndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_int_Sg__IndexOf(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_IntervalList_LastIndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_unsigned_SS_int_Sg__LastIndexOf(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DryadUnity_IntervalList_Remove(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_unsigned_SS_int_Sg__Remove(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_IntervalList(void * jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  arg1 = (std::vector< unsigned int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_Clear(void * jarg1) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_Add(void * jarg1, void * jarg2) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  NoteToPlay *arg2 = 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (NoteToPlay *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteToPlay const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((NoteToPlay const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  std::vector< NoteToPlay >::size_type result;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  result = ((std::vector< NoteToPlay > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  std::vector< NoteToPlay >::size_type result;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  result = ((std::vector< NoteToPlay > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  std::vector< NoteToPlay >::size_type arg2 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (std::vector< NoteToPlay >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteToPlayList__SWIG_0() {
  void * jresult ;
  std::vector< NoteToPlay > *result = 0 ;
  
  result = (std::vector< NoteToPlay > *)new std::vector< NoteToPlay >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteToPlayList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< NoteToPlay > *arg1 = 0 ;
  std::vector< NoteToPlay > *result = 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteToPlay > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< NoteToPlay > *)new std::vector< NoteToPlay >((std::vector< NoteToPlay > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteToPlayList__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< NoteToPlay > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< NoteToPlay > *)new_std_vector_Sl_NoteToPlay_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  int arg2 ;
  NoteToPlay result;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_NoteToPlay_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new NoteToPlay((const NoteToPlay &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  int arg2 ;
  std::vector< NoteToPlay >::value_type *result = 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< NoteToPlay >::value_type *) &std_vector_Sl_NoteToPlay_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  int arg2 ;
  NoteToPlay *arg3 = 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NoteToPlay *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteToPlay const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteToPlay_Sg__setitem(arg1,arg2,(NoteToPlay const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_AddRange(void * jarg1, void * jarg2) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  std::vector< NoteToPlay > *arg2 = 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (std::vector< NoteToPlay > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteToPlay > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_NoteToPlay_Sg__AddRange(arg1,(std::vector< NoteToPlay > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< NoteToPlay > *result = 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< NoteToPlay > *)std_vector_Sl_NoteToPlay_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  int arg2 ;
  NoteToPlay *arg3 = 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NoteToPlay *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteToPlay const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteToPlay_Sg__Insert(arg1,arg2,(NoteToPlay const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  int arg2 ;
  std::vector< NoteToPlay > *arg3 = 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< NoteToPlay > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteToPlay > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteToPlay_Sg__InsertRange(arg1,arg2,(std::vector< NoteToPlay > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_RemoveAt(void * jarg1, int jarg2) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_NoteToPlay_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_NoteToPlay_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  NoteToPlay *arg1 = 0 ;
  int arg2 ;
  std::vector< NoteToPlay > *result = 0 ;
  
  arg1 = (NoteToPlay *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteToPlay const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< NoteToPlay > *)std_vector_Sl_NoteToPlay_Sg__Repeat((NoteToPlay const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_Reverse__SWIG_0(void * jarg1) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  std_vector_Sl_NoteToPlay_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_NoteToPlay_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteToPlayList_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  int arg2 ;
  std::vector< NoteToPlay > *arg3 = 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< NoteToPlay > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteToPlay > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteToPlay_Sg__SetRange(arg1,arg2,(std::vector< NoteToPlay > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_NoteToPlayList(void * jarg1) {
  std::vector< NoteToPlay > *arg1 = (std::vector< NoteToPlay > *) 0 ;
  
  arg1 = (std::vector< NoteToPlay > *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

