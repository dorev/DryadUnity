/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_DryadApi(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_DryadApi(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_DryadApi(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "dryadapi.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< Node > *new_std_vector_Sl_Node_Sg___SWIG_2(int capacity){
        std::vector< Node >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Node >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Node std_vector_Sl_Node_Sg__getitemcopy(std::vector< Node > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Node >::value_type const &std_vector_Sl_Node_Sg__getitem(std::vector< Node > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sg__setitem(std::vector< Node > *self,int index,Node const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sg__AddRange(std::vector< Node > *self,std::vector< Node > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Node > *std_vector_Sl_Node_Sg__GetRange(std::vector< Node > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Node >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Node_Sg__Insert(std::vector< Node > *self,int index,Node const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sg__InsertRange(std::vector< Node > *self,int index,std::vector< Node > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sg__RemoveAt(std::vector< Node > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sg__RemoveRange(std::vector< Node > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Node > *std_vector_Sl_Node_Sg__Repeat(Node const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Node >(count, value);
      }
SWIGINTERN void std_vector_Sl_Node_Sg__Reverse__SWIG_0(std::vector< Node > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Node_Sg__Reverse__SWIG_1(std::vector< Node > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Node_Sg__SetRange(std::vector< Node > *self,int index,std::vector< Node > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Edge > *new_std_vector_Sl_Edge_Sg___SWIG_2(int capacity){
        std::vector< Edge >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Edge >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Edge std_vector_Sl_Edge_Sg__getitemcopy(std::vector< Edge > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Edge >::value_type const &std_vector_Sl_Edge_Sg__getitem(std::vector< Edge > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__setitem(std::vector< Edge > *self,int index,Edge const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__AddRange(std::vector< Edge > *self,std::vector< Edge > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Edge > *std_vector_Sl_Edge_Sg__GetRange(std::vector< Edge > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Edge >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__Insert(std::vector< Edge > *self,int index,Edge const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__InsertRange(std::vector< Edge > *self,int index,std::vector< Edge > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__RemoveAt(std::vector< Edge > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__RemoveRange(std::vector< Edge > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Edge > *std_vector_Sl_Edge_Sg__Repeat(Edge const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Edge >(count, value);
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__Reverse__SWIG_0(std::vector< Edge > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__Reverse__SWIG_1(std::vector< Edge > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Edge_Sg__SetRange(std::vector< Edge > *self,int index,std::vector< Edge > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< NoteConcrete > *new_std_vector_Sl_NoteConcrete_Sg___SWIG_2(int capacity){
        std::vector< NoteConcrete >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< NoteConcrete >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN NoteConcrete std_vector_Sl_NoteConcrete_Sg__getitemcopy(std::vector< NoteConcrete > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< NoteConcrete >::value_type const &std_vector_Sl_NoteConcrete_Sg__getitem(std::vector< NoteConcrete > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteConcrete_Sg__setitem(std::vector< NoteConcrete > *self,int index,NoteConcrete const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteConcrete_Sg__AddRange(std::vector< NoteConcrete > *self,std::vector< NoteConcrete > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< NoteConcrete > *std_vector_Sl_NoteConcrete_Sg__GetRange(std::vector< NoteConcrete > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< NoteConcrete >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_NoteConcrete_Sg__Insert(std::vector< NoteConcrete > *self,int index,NoteConcrete const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteConcrete_Sg__InsertRange(std::vector< NoteConcrete > *self,int index,std::vector< NoteConcrete > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteConcrete_Sg__RemoveAt(std::vector< NoteConcrete > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteConcrete_Sg__RemoveRange(std::vector< NoteConcrete > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< NoteConcrete > *std_vector_Sl_NoteConcrete_Sg__Repeat(NoteConcrete const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< NoteConcrete >(count, value);
      }
SWIGINTERN void std_vector_Sl_NoteConcrete_Sg__Reverse__SWIG_0(std::vector< NoteConcrete > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_NoteConcrete_Sg__Reverse__SWIG_1(std::vector< NoteConcrete > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_NoteConcrete_Sg__SetRange(std::vector< NoteConcrete > *self,int index,std::vector< NoteConcrete > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< NoteConcept > *new_std_vector_Sl_NoteConcept_Sg___SWIG_2(int capacity){
        std::vector< NoteConcept >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< NoteConcept >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN NoteConcept std_vector_Sl_NoteConcept_Sg__getitemcopy(std::vector< NoteConcept > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< NoteConcept >::value_type const &std_vector_Sl_NoteConcept_Sg__getitem(std::vector< NoteConcept > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteConcept_Sg__setitem(std::vector< NoteConcept > *self,int index,NoteConcept const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteConcept_Sg__AddRange(std::vector< NoteConcept > *self,std::vector< NoteConcept > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< NoteConcept > *std_vector_Sl_NoteConcept_Sg__GetRange(std::vector< NoteConcept > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< NoteConcept >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_NoteConcept_Sg__Insert(std::vector< NoteConcept > *self,int index,NoteConcept const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteConcept_Sg__InsertRange(std::vector< NoteConcept > *self,int index,std::vector< NoteConcept > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteConcept_Sg__RemoveAt(std::vector< NoteConcept > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_NoteConcept_Sg__RemoveRange(std::vector< NoteConcept > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< NoteConcept > *std_vector_Sl_NoteConcept_Sg__Repeat(NoteConcept const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< NoteConcept >(count, value);
      }
SWIGINTERN void std_vector_Sl_NoteConcept_Sg__Reverse__SWIG_0(std::vector< NoteConcept > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_NoteConcept_Sg__Reverse__SWIG_1(std::vector< NoteConcept > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_NoteConcept_Sg__SetRange(std::vector< NoteConcept > *self,int index,std::vector< NoteConcept > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcept_duration_set(void * jarg1, int jarg2) {
  NoteConcept *arg1 = (NoteConcept *) 0 ;
  int arg2 ;
  
  arg1 = (NoteConcept *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_NoteConcept_duration_get(void * jarg1) {
  int jresult ;
  NoteConcept *arg1 = (NoteConcept *) 0 ;
  int result;
  
  arg1 = (NoteConcept *)jarg1; 
  result = (int) ((arg1)->duration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcept_value_set(void * jarg1, int jarg2) {
  NoteConcept *arg1 = (NoteConcept *) 0 ;
  int arg2 ;
  
  arg1 = (NoteConcept *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_NoteConcept_value_get(void * jarg1) {
  int jresult ;
  NoteConcept *arg1 = (NoteConcept *) 0 ;
  int result;
  
  arg1 = (NoteConcept *)jarg1; 
  result = (int) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteConcept() {
  void * jresult ;
  NoteConcept *result = 0 ;
  
  result = (NoteConcept *)new NoteConcept();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_NoteConcept(void * jarg1) {
  NoteConcept *arg1 = (NoteConcept *) 0 ;
  
  arg1 = (NoteConcept *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcrete_duration_set(void * jarg1, int jarg2) {
  NoteConcrete *arg1 = (NoteConcrete *) 0 ;
  int arg2 ;
  
  arg1 = (NoteConcrete *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_NoteConcrete_duration_get(void * jarg1) {
  int jresult ;
  NoteConcrete *arg1 = (NoteConcrete *) 0 ;
  int result;
  
  arg1 = (NoteConcrete *)jarg1; 
  result = (int) ((arg1)->duration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcrete_midi_set(void * jarg1, int jarg2) {
  NoteConcrete *arg1 = (NoteConcrete *) 0 ;
  int arg2 ;
  
  arg1 = (NoteConcrete *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->midi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_NoteConcrete_midi_get(void * jarg1) {
  int jresult ;
  NoteConcrete *arg1 = (NoteConcrete *) 0 ;
  int result;
  
  arg1 = (NoteConcrete *)jarg1; 
  result = (int) ((arg1)->midi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcrete_velocity_set(void * jarg1, int jarg2) {
  NoteConcrete *arg1 = (NoteConcrete *) 0 ;
  int arg2 ;
  
  arg1 = (NoteConcrete *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->velocity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_NoteConcrete_velocity_get(void * jarg1) {
  int jresult ;
  NoteConcrete *arg1 = (NoteConcrete *) 0 ;
  int result;
  
  arg1 = (NoteConcrete *)jarg1; 
  result = (int) ((arg1)->velocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteConcrete() {
  void * jresult ;
  NoteConcrete *result = 0 ;
  
  result = (NoteConcrete *)new NoteConcrete();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_NoteConcrete(void * jarg1) {
  NoteConcrete *arg1 = (NoteConcrete *) 0 ;
  
  arg1 = (NoteConcrete *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Motif_name_set(void * jarg1, char * jarg2) {
  Motif *arg1 = (Motif *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Motif *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DryadUnity_Motif_name_get(void * jarg1) {
  char * jresult ;
  Motif *arg1 = (Motif *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Motif *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Motif_notes_set(void * jarg1, void * jarg2) {
  Motif *arg1 = (Motif *) 0 ;
  std::vector< NoteConcept > *arg2 = (std::vector< NoteConcept > *) 0 ;
  
  arg1 = (Motif *)jarg1; 
  arg2 = (std::vector< NoteConcept > *)jarg2; 
  if (arg1) (arg1)->notes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_Motif_notes_get(void * jarg1) {
  void * jresult ;
  Motif *arg1 = (Motif *) 0 ;
  std::vector< NoteConcept > *result = 0 ;
  
  arg1 = (Motif *)jarg1; 
  result = (std::vector< NoteConcept > *)& ((arg1)->notes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_Motif() {
  void * jresult ;
  Motif *result = 0 ;
  
  result = (Motif *)new Motif();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_Motif(void * jarg1) {
  Motif *arg1 = (Motif *) 0 ;
  
  arg1 = (Motif *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Scale_name_set(void * jarg1, char * jarg2) {
  Scale *arg1 = (Scale *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Scale *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DryadUnity_Scale_name_get(void * jarg1) {
  char * jresult ;
  Scale *arg1 = (Scale *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Scale *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Scale_intervals_set(void * jarg1, void * jarg2) {
  Scale *arg1 = (Scale *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  arg1 = (Scale *)jarg1; 
  arg2 = (std::vector< int > *)jarg2; 
  if (arg1) (arg1)->intervals = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_Scale_intervals_get(void * jarg1) {
  void * jresult ;
  Scale *arg1 = (Scale *) 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (Scale *)jarg1; 
  result = (std::vector< int > *)& ((arg1)->intervals);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_Scale() {
  void * jresult ;
  Scale *result = 0 ;
  
  result = (Scale *)new Scale();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_Scale(void * jarg1) {
  Scale *arg1 = (Scale *) 0 ;
  
  arg1 = (Scale *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Node_id_set(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_Node_id_get(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Node_degree_set(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->degree = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_Node_degree_get(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int) ((arg1)->degree);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Node_inversion_set(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->inversion = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_Node_inversion_get(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int) ((arg1)->inversion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Node_accidental_set(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->accidental = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_Node_accidental_get(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int) ((arg1)->accidental);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Node_chordVoicingFlags_set(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chordVoicingFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_Node_chordVoicingFlags_get(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int) ((arg1)->chordVoicingFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_Node() {
  void * jresult ;
  Node *result = 0 ;
  
  result = (Node *)new Node();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_Node(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Edge_from_set(void * jarg1, int jarg2) {
  Edge *arg1 = (Edge *) 0 ;
  int arg2 ;
  
  arg1 = (Edge *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->from = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_Edge_from_get(void * jarg1) {
  int jresult ;
  Edge *arg1 = (Edge *) 0 ;
  int result;
  
  arg1 = (Edge *)jarg1; 
  result = (int) ((arg1)->from);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Edge_to_set(void * jarg1, int jarg2) {
  Edge *arg1 = (Edge *) 0 ;
  int arg2 ;
  
  arg1 = (Edge *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->to = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_Edge_to_get(void * jarg1) {
  int jresult ;
  Edge *arg1 = (Edge *) 0 ;
  int result;
  
  arg1 = (Edge *)jarg1; 
  result = (int) ((arg1)->to);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_Edge() {
  void * jresult ;
  Edge *result = 0 ;
  
  result = (Edge *)new Edge();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_Edge(void * jarg1) {
  Edge *arg1 = (Edge *) 0 ;
  
  arg1 = (Edge *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_HarmonyGraph_scale_set(void * jarg1, void * jarg2) {
  HarmonyGraph *arg1 = (HarmonyGraph *) 0 ;
  Scale *arg2 = (Scale *) 0 ;
  
  arg1 = (HarmonyGraph *)jarg1; 
  arg2 = (Scale *)jarg2; 
  if (arg1) (arg1)->scale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_HarmonyGraph_scale_get(void * jarg1) {
  void * jresult ;
  HarmonyGraph *arg1 = (HarmonyGraph *) 0 ;
  Scale *result = 0 ;
  
  arg1 = (HarmonyGraph *)jarg1; 
  result = (Scale *)& ((arg1)->scale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_HarmonyGraph_nodes_set(void * jarg1, void * jarg2) {
  HarmonyGraph *arg1 = (HarmonyGraph *) 0 ;
  std::vector< Node > *arg2 = (std::vector< Node > *) 0 ;
  
  arg1 = (HarmonyGraph *)jarg1; 
  arg2 = (std::vector< Node > *)jarg2; 
  if (arg1) (arg1)->nodes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_HarmonyGraph_nodes_get(void * jarg1) {
  void * jresult ;
  HarmonyGraph *arg1 = (HarmonyGraph *) 0 ;
  std::vector< Node > *result = 0 ;
  
  arg1 = (HarmonyGraph *)jarg1; 
  result = (std::vector< Node > *)& ((arg1)->nodes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_HarmonyGraph_edges_set(void * jarg1, void * jarg2) {
  HarmonyGraph *arg1 = (HarmonyGraph *) 0 ;
  std::vector< Edge > *arg2 = (std::vector< Edge > *) 0 ;
  
  arg1 = (HarmonyGraph *)jarg1; 
  arg2 = (std::vector< Edge > *)jarg2; 
  if (arg1) (arg1)->edges = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_HarmonyGraph_edges_get(void * jarg1) {
  void * jresult ;
  HarmonyGraph *arg1 = (HarmonyGraph *) 0 ;
  std::vector< Edge > *result = 0 ;
  
  arg1 = (HarmonyGraph *)jarg1; 
  result = (std::vector< Edge > *)& ((arg1)->edges);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_HarmonyGraph() {
  void * jresult ;
  HarmonyGraph *result = 0 ;
  
  result = (HarmonyGraph *)new HarmonyGraph();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_HarmonyGraph(void * jarg1) {
  HarmonyGraph *arg1 = (HarmonyGraph *) 0 ;
  
  arg1 = (HarmonyGraph *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Event_flag_set(void * jarg1, int jarg2) {
  Event *arg1 = (Event *) 0 ;
  EventFlag arg2 ;
  
  arg1 = (Event *)jarg1; 
  arg2 = (EventFlag)jarg2; 
  if (arg1) (arg1)->flag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_Event_flag_get(void * jarg1) {
  int jresult ;
  Event *arg1 = (Event *) 0 ;
  EventFlag result;
  
  arg1 = (Event *)jarg1; 
  result = (EventFlag) ((arg1)->flag);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Event_id_set(void * jarg1, int jarg2) {
  Event *arg1 = (Event *) 0 ;
  int arg2 ;
  
  arg1 = (Event *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_Event_id_get(void * jarg1) {
  int jresult ;
  Event *arg1 = (Event *) 0 ;
  int result;
  
  arg1 = (Event *)jarg1; 
  result = (int) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Event_time_set(void * jarg1, double jarg2) {
  Event *arg1 = (Event *) 0 ;
  double arg2 ;
  
  arg1 = (Event *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->time = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DryadUnity_Event_time_get(void * jarg1) {
  double jresult ;
  Event *arg1 = (Event *) 0 ;
  double result;
  
  arg1 = (Event *)jarg1; 
  result = (double) ((arg1)->time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Event_notes_set(void * jarg1, void * jarg2) {
  Event *arg1 = (Event *) 0 ;
  std::vector< NoteConcrete > *arg2 = (std::vector< NoteConcrete > *) 0 ;
  
  arg1 = (Event *)jarg1; 
  arg2 = (std::vector< NoteConcrete > *)jarg2; 
  if (arg1) (arg1)->notes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_Event_notes_get(void * jarg1) {
  void * jresult ;
  Event *arg1 = (Event *) 0 ;
  std::vector< NoteConcrete > *result = 0 ;
  
  arg1 = (Event *)jarg1; 
  result = (std::vector< NoteConcrete > *)& ((arg1)->notes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_Event() {
  void * jresult ;
  Event *result = 0 ;
  
  result = (Event *)new Event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_Event(void * jarg1) {
  Event *arg1 = (Event *) 0 ;
  
  arg1 = (Event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Engine_Start(void * jarg1, double jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  double arg2 ;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->Start(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Engine_SetTempo(void * jarg1, int jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  int arg2 ;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTempo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Engine_RegisterMotif(void * jarg1, char * jarg2, void * jarg3) {
  Engine *arg1 = (Engine *) 0 ;
  std::string arg2 ;
  Motif arg3 ;
  Motif *argp3 ;
  
  arg1 = (Engine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  argp3 = (Motif *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Motif", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->RegisterMotif(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Engine_AddMotif(void * jarg1, char * jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  std::string arg2 ;
  
  arg1 = (Engine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->AddMotif(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Engine_RemoveMotif(void * jarg1, char * jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  std::string arg2 ;
  
  arg1 = (Engine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->RemoveMotif(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Engine_RegisterHarmonyGraph(void * jarg1, char * jarg2, void * jarg3) {
  Engine *arg1 = (Engine *) 0 ;
  std::string arg2 ;
  HarmonyGraph arg3 ;
  HarmonyGraph *argp3 ;
  
  arg1 = (Engine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  argp3 = (HarmonyGraph *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HarmonyGraph", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->RegisterHarmonyGraph(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_Engine_TransitionToHarmonyGraph(void * jarg1, char * jarg2) {
  Engine *arg1 = (Engine *) 0 ;
  std::string arg2 ;
  
  arg1 = (Engine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->TransitionToHarmonyGraph(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_Engine_GetUpcomingEvents(void * jarg1, int jarg2) {
  void * jresult ;
  Engine *arg1 = (Engine *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< Event > > result;
  
  arg1 = (Engine *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetUpcomingEvents(arg2);
  jresult = new std::vector< Event >((const std::vector< Event > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_Engine() {
  void * jresult ;
  Engine *result = 0 ;
  
  result = (Engine *)new Engine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_Engine(void * jarg1) {
  Engine *arg1 = (Engine *) 0 ;
  
  arg1 = (Engine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_Clear(void * jarg1) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_Add(void * jarg1, void * jarg2) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  Node *arg2 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (Node *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Node const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_NodeVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node >::size_type result;
  
  arg1 = (std::vector< Node > *)jarg1; 
  result = ((std::vector< Node > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_NodeVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node >::size_type result;
  
  arg1 = (std::vector< Node > *)jarg1; 
  result = ((std::vector< Node > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node >::size_type arg2 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (std::vector< Node >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NodeVector__SWIG_0() {
  void * jresult ;
  std::vector< Node > *result = 0 ;
  
  result = (std::vector< Node > *)new std::vector< Node >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NodeVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Node > *arg1 = 0 ;
  std::vector< Node > *result = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Node > *)new std::vector< Node >((std::vector< Node > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NodeVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Node > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Node > *)new_std_vector_Sl_Node_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NodeVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  Node result;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Node_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Node((const Node &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NodeVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  std::vector< Node >::value_type *result = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Node >::value_type *) &std_vector_Sl_Node_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  Node *arg3 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Node *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Node_Sg__setitem(arg1,arg2,(Node const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node > *arg2 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (std::vector< Node > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Node_Sg__AddRange(arg1,(std::vector< Node > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NodeVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Node > *result = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Node > *)std_vector_Sl_Node_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  Node *arg3 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Node *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Node_Sg__Insert(arg1,arg2,(Node const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  std::vector< Node > *arg3 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Node > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Node_Sg__InsertRange(arg1,arg2,(std::vector< Node > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Node_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Node_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NodeVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Node *arg1 = 0 ;
  int arg2 ;
  std::vector< Node > *result = 0 ;
  
  arg1 = (Node *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Node const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Node > *)std_vector_Sl_Node_Sg__Repeat((Node const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  std_vector_Sl_Node_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Node_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NodeVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  std::vector< Node > *arg3 = 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Node > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Node_Sg__SetRange(arg1,arg2,(std::vector< Node > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_NodeVector(void * jarg1) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  
  arg1 = (std::vector< Node > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_Clear(void * jarg1) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_Add(void * jarg1, void * jarg2) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  Edge *arg2 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (Edge *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Edge const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Edge const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_EdgeVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  std::vector< Edge >::size_type result;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  result = ((std::vector< Edge > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_EdgeVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  std::vector< Edge >::size_type result;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  result = ((std::vector< Edge > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  std::vector< Edge >::size_type arg2 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (std::vector< Edge >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_EdgeVector__SWIG_0() {
  void * jresult ;
  std::vector< Edge > *result = 0 ;
  
  result = (std::vector< Edge > *)new std::vector< Edge >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_EdgeVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Edge > *arg1 = 0 ;
  std::vector< Edge > *result = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Edge > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Edge > *)new std::vector< Edge >((std::vector< Edge > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_EdgeVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Edge > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Edge > *)new_std_vector_Sl_Edge_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_EdgeVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  Edge result;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Edge_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new Edge((const Edge &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_EdgeVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  std::vector< Edge >::value_type *result = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Edge >::value_type *) &std_vector_Sl_Edge_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  Edge *arg3 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Edge *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Edge const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Edge_Sg__setitem(arg1,arg2,(Edge const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  std::vector< Edge > *arg2 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (std::vector< Edge > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Edge > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Edge_Sg__AddRange(arg1,(std::vector< Edge > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_EdgeVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Edge > *result = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Edge > *)std_vector_Sl_Edge_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  Edge *arg3 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Edge *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Edge const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Edge_Sg__Insert(arg1,arg2,(Edge const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  std::vector< Edge > *arg3 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Edge > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Edge > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Edge_Sg__InsertRange(arg1,arg2,(std::vector< Edge > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Edge_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Edge_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_EdgeVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Edge *arg1 = 0 ;
  int arg2 ;
  std::vector< Edge > *result = 0 ;
  
  arg1 = (Edge *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Edge const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Edge > *)std_vector_Sl_Edge_Sg__Repeat((Edge const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  std_vector_Sl_Edge_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Edge_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_EdgeVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  int arg2 ;
  std::vector< Edge > *arg3 = 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Edge > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Edge > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Edge_Sg__SetRange(arg1,arg2,(std::vector< Edge > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_EdgeVector(void * jarg1) {
  std::vector< Edge > *arg1 = (std::vector< Edge > *) 0 ;
  
  arg1 = (std::vector< Edge > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_IntVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_IntVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_IntVector__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_IntVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_IntVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_IntVector_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_IntVector_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_IntVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_IntVector_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_IntVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DryadUnity_IntVector_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_IntVector_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DryadUnity_IntVector_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DryadUnity_IntVector_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_IntVector(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_Clear(void * jarg1) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_Add(void * jarg1, void * jarg2) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  NoteConcrete *arg2 = 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (NoteConcrete *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteConcrete const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((NoteConcrete const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  std::vector< NoteConcrete >::size_type result;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  result = ((std::vector< NoteConcrete > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  std::vector< NoteConcrete >::size_type result;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  result = ((std::vector< NoteConcrete > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  std::vector< NoteConcrete >::size_type arg2 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (std::vector< NoteConcrete >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteConcreteVector__SWIG_0() {
  void * jresult ;
  std::vector< NoteConcrete > *result = 0 ;
  
  result = (std::vector< NoteConcrete > *)new std::vector< NoteConcrete >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteConcreteVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< NoteConcrete > *arg1 = 0 ;
  std::vector< NoteConcrete > *result = 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteConcrete > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< NoteConcrete > *)new std::vector< NoteConcrete >((std::vector< NoteConcrete > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteConcreteVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< NoteConcrete > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< NoteConcrete > *)new_std_vector_Sl_NoteConcrete_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  int arg2 ;
  NoteConcrete result;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_NoteConcrete_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new NoteConcrete((const NoteConcrete &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  int arg2 ;
  std::vector< NoteConcrete >::value_type *result = 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< NoteConcrete >::value_type *) &std_vector_Sl_NoteConcrete_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  int arg2 ;
  NoteConcrete *arg3 = 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NoteConcrete *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteConcrete const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteConcrete_Sg__setitem(arg1,arg2,(NoteConcrete const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  std::vector< NoteConcrete > *arg2 = 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (std::vector< NoteConcrete > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteConcrete > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_NoteConcrete_Sg__AddRange(arg1,(std::vector< NoteConcrete > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< NoteConcrete > *result = 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< NoteConcrete > *)std_vector_Sl_NoteConcrete_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  int arg2 ;
  NoteConcrete *arg3 = 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NoteConcrete *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteConcrete const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteConcrete_Sg__Insert(arg1,arg2,(NoteConcrete const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  int arg2 ;
  std::vector< NoteConcrete > *arg3 = 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< NoteConcrete > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteConcrete > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteConcrete_Sg__InsertRange(arg1,arg2,(std::vector< NoteConcrete > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_NoteConcrete_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_NoteConcrete_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  NoteConcrete *arg1 = 0 ;
  int arg2 ;
  std::vector< NoteConcrete > *result = 0 ;
  
  arg1 = (NoteConcrete *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteConcrete const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< NoteConcrete > *)std_vector_Sl_NoteConcrete_Sg__Repeat((NoteConcrete const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  std_vector_Sl_NoteConcrete_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_NoteConcrete_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConcreteVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  int arg2 ;
  std::vector< NoteConcrete > *arg3 = 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< NoteConcrete > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteConcrete > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteConcrete_Sg__SetRange(arg1,arg2,(std::vector< NoteConcrete > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_NoteConcreteVector(void * jarg1) {
  std::vector< NoteConcrete > *arg1 = (std::vector< NoteConcrete > *) 0 ;
  
  arg1 = (std::vector< NoteConcrete > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_Clear(void * jarg1) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_Add(void * jarg1, void * jarg2) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  NoteConcept *arg2 = 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (NoteConcept *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteConcept const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((NoteConcept const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  std::vector< NoteConcept >::size_type result;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  result = ((std::vector< NoteConcept > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  std::vector< NoteConcept >::size_type result;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  result = ((std::vector< NoteConcept > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  std::vector< NoteConcept >::size_type arg2 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (std::vector< NoteConcept >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteConceptVector__SWIG_0() {
  void * jresult ;
  std::vector< NoteConcept > *result = 0 ;
  
  result = (std::vector< NoteConcept > *)new std::vector< NoteConcept >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteConceptVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< NoteConcept > *arg1 = 0 ;
  std::vector< NoteConcept > *result = 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteConcept > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< NoteConcept > *)new std::vector< NoteConcept >((std::vector< NoteConcept > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_new_NoteConceptVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< NoteConcept > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< NoteConcept > *)new_std_vector_Sl_NoteConcept_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  int arg2 ;
  NoteConcept result;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_NoteConcept_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new NoteConcept((const NoteConcept &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  int arg2 ;
  std::vector< NoteConcept >::value_type *result = 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< NoteConcept >::value_type *) &std_vector_Sl_NoteConcept_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  int arg2 ;
  NoteConcept *arg3 = 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NoteConcept *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteConcept const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteConcept_Sg__setitem(arg1,arg2,(NoteConcept const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  std::vector< NoteConcept > *arg2 = 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (std::vector< NoteConcept > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteConcept > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_NoteConcept_Sg__AddRange(arg1,(std::vector< NoteConcept > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< NoteConcept > *result = 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< NoteConcept > *)std_vector_Sl_NoteConcept_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  int arg2 ;
  NoteConcept *arg3 = 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (NoteConcept *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteConcept const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteConcept_Sg__Insert(arg1,arg2,(NoteConcept const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  int arg2 ;
  std::vector< NoteConcept > *arg3 = 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< NoteConcept > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteConcept > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteConcept_Sg__InsertRange(arg1,arg2,(std::vector< NoteConcept > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_NoteConcept_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_NoteConcept_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  NoteConcept *arg1 = 0 ;
  int arg2 ;
  std::vector< NoteConcept > *result = 0 ;
  
  arg1 = (NoteConcept *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "NoteConcept const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< NoteConcept > *)std_vector_Sl_NoteConcept_Sg__Repeat((NoteConcept const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  std_vector_Sl_NoteConcept_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_NoteConcept_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_NoteConceptVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  int arg2 ;
  std::vector< NoteConcept > *arg3 = 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< NoteConcept > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< NoteConcept > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_NoteConcept_Sg__SetRange(arg1,arg2,(std::vector< NoteConcept > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DryadUnity_delete_NoteConceptVector(void * jarg1) {
  std::vector< NoteConcept > *arg1 = (std::vector< NoteConcept > *) 0 ;
  
  arg1 = (std::vector< NoteConcept > *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

