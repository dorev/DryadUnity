//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DryadUnity {

public class Engine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Engine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Engine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Engine() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DryadApiPINVOKE.delete_Engine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void Start(double time) {
    DryadApiPINVOKE.Engine_Start(swigCPtr, time);
  }

  public void SetTempo(int tempo) {
    DryadApiPINVOKE.Engine_SetTempo(swigCPtr, tempo);
  }

  public void RegisterMotif(string name, Motif motif) {
    DryadApiPINVOKE.Engine_RegisterMotif(swigCPtr, name, Motif.getCPtr(motif));
    if (DryadApiPINVOKE.SWIGPendingException.Pending) throw DryadApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddMotif(string name) {
    DryadApiPINVOKE.Engine_AddMotif(swigCPtr, name);
    if (DryadApiPINVOKE.SWIGPendingException.Pending) throw DryadApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveMotif(string name) {
    DryadApiPINVOKE.Engine_RemoveMotif(swigCPtr, name);
    if (DryadApiPINVOKE.SWIGPendingException.Pending) throw DryadApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RegisterHarmonyGraph(string name, HarmonyGraph HarmonyGraph) {
    DryadApiPINVOKE.Engine_RegisterHarmonyGraph(swigCPtr, name, HarmonyGraph.getCPtr(HarmonyGraph));
    if (DryadApiPINVOKE.SWIGPendingException.Pending) throw DryadApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void TransitionToHarmonyGraph(string name) {
    DryadApiPINVOKE.Engine_TransitionToHarmonyGraph(swigCPtr, name);
    if (DryadApiPINVOKE.SWIGPendingException.Pending) throw DryadApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_Event_t GetUpcomingEvents(int count) {
    SWIGTYPE_p_std__vectorT_Event_t ret = new SWIGTYPE_p_std__vectorT_Event_t(DryadApiPINVOKE.Engine_GetUpcomingEvents(swigCPtr, count), true);
    return ret;
  }

  public Engine() : this(DryadApiPINVOKE.new_Engine(), true) {
  }

}

}
